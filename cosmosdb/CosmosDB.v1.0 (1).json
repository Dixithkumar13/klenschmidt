{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiType": {
      "type": "string",
      "metadata": {
        "description": "The Azure Cosmos DB API type, by default Cassandra; otherwise one of Gremlin, MongoDB, SQL, or Table"
      },
      "allowedValues": [
        "Cassandra",
        "Gremlin",
        "MongoDB",
        "SQL",
        "Table"
      ],
      "defaultValue": "SQL"
    },
 "writeRegionLocation": {
      "type": "string",
      "metadata": {
        "description": "The location of the write region of the database account. For Azure Gov, China, and Germany, the allowed values are different."
      },
      "allowedValues": [
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth"
      ],
      "defaultValue": "eastus2"	 
    },
    "readRegionLocation": {
      "type": "string",
      "metadata": {
        "description": "The location of the read region of the database account. For Azure Gov, China, and Germany, the allowed values are different."
      },
      "allowedValues": [
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth"
      ],
      "defaultValue": "eastus"	    
    }, 
	"consistencyLevel": {
      "type": "string",
      "allowedValues": [
        "Eventual",
        "Strong",
        "Session",
        "BoundedStaleness"
      ],
      "defaultValue": "Session",
      "metadata": {
        "description": "The Azure Cosmos DB default consistency level for this account."
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "minValue": 10,
      "maxValue": 1000,
      "defaultValue": 10,
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "minValue": 5,
      "maxValue": 600,
      "defaultValue": 5,
      "metadata": {
        "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
      }
    },  
	"enableMultipleWriteLocations": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": ""
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
	"SWL": {
		"type": "string",
		"defaultValue": "PCS",
		"allowedValues": [
			"PCS",
			"APP"
		],
		"metadata": {
			"description": ""
		}
	},
	"CosmosDBLocationShortForm": {
		"type": "string",
		"defaultValue": "eus",
		"allowedValues": [
			"eus",
			"eus2"
		],
		"metadata": {
			"description": ""
		}
	},
	"SDLC": {
		"type": "string",
		"defaultValue": "Development",
		"allowedValues": [
			"Development",
			"UAT",			
			"PRD"
		],
		"metadata": {
			"description": ""
		}
	},
	"NumberOfInstances": {
		"type": "int",
		"defaultValue": 5,
		"metadata": {
			"description": "No of storages to create"
		}
	},
	"SequenceStartIndex": {
		"type": "int",
		"defaultValue": 1,
		"metadata": {
			"description": ""
		}
	}
  },
  "variables": {},
  "resources": [
   {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "kind": "[if(equals(parameters('apiType'), 'MongoDB'), 'MongoDB', 'GlobalDocumentDB')]",
      "name": "[toLower(concat(substring(parameters('SWL'), 0, 3),string(add(parameters('sequenceStartIndex'), copyIndex())),substring(parameters('SDLC'), 0, 3),parameters('CosmosDBLocationShortForm'),'csdb'))]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[toLower(concat(substring(parameters('SWL'), 0, 3),string(add(parameters('sequenceStartIndex'), copyIndex())),substring(parameters('SDLC'), 0, 3),parameters('CosmosDBLocationShortForm'),'csdb'))]",
        "databaseAccountOfferType": "[variables('offerType')]",
		"consistencyPolicy": {
          "defaultConsistencyLevel": "[parameters('consistencyLevel')]",
          "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
          "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
        },
		"enableMultipleWriteLocations": "[parameters('enableMultipleWriteLocations')]",
        "locations": [
			  {
				"locationName": "[parameters('writeRegionLocation')]",
				"failoverPriority": 0
			  },
			  {
				"locationName": "[parameters('readRegionLocation')]",
				"failoverPriority": 1
			  }
		],
        "capabilities": [ ]
      },	  
		"copy": {
			"name": "storagecopy",
			"count": "[parameters('NumberOfInstances')]"
		},
      "tags": {
        "defaultExperience": "[if(equals(parameters('apiType'), 'Cassandra'), 'Cassandra', if(equals(parameters('apiType'), 'Gremlin'), 'Graph', if(equals(parameters('apiType'), 'MongoDB'), 'MongoDB', if(equals(parameters('apiType'), 'SQL'), 'DocumentDB', if(equals(parameters('apiType'), 'Table'), 'Table', '')))))]"
      }
    }
  ],
  "outputs": {}
}
